// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

generator zod {
  provider = "zod-prisma-types"
  output   = "./generated/zod"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String   @id
  email         String   @unique
  name          String
  emailVerified Boolean
  image         String?
  phone         String
  nis           String?
  nip           String?
  role          UserRole @default(siswa)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  sessions Session[]
  accounts Account[]
  reports  Report[]

  @@map("user")
}

enum UserRole {
  siswa
  guru
  karyawan
  admin
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  impersonatedBy String?

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model Report {
  id         Int              @id @default(autoincrement())
  title      String
  content    String
  userId     String
  user       User             @relation(references: [id], fields: [userId])
  anonym     Boolean?         @default(false)
  image      String?
  category   ReportCategory
  status     ReportStatus     @default(VERIFICATION_PROCESS)
  department ReportDepartment
  createdAt  DateTime         @default(now())
  updatedAt  DateTime         @updatedAt
}

enum ReportCategory {
  COMPLAINT
  ASPIRATION
  INFORMATION_REQUEST
}

enum ReportStatus {
  VERIFICATION_PROCESS
  VERIFIED
  FOLLOW_UP
  COMPLETED
}

enum ReportDepartment {
  GURU
  TU
  KESISWAAN
  BK
  KEPALA_SEKOLAH
  BADAN_KEBERSIHAN
  KEAMANAN
  SARPRAS
}
